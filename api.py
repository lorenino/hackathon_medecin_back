"""
API minimale FastAPI pour l'agent de recherche web Mistral
"""

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional, Any, Dict
import uvicorn
from agent import WebSearchAgent
from fastapi.responses import JSONResponse

app = FastAPI(title="WebSearch Agent", version="1.0")
agent = None

class BriefRequest(BaseModel):
    specialite: str
    frequence: str
    format_brief: str
    type_contenu: str
    style: str
    thematiques: List[str]
    medicaments: str
    recommandations: str
    formation_continue: str
    tendances_sante_publique: str
    limite: int
    tonalite: str

class SearchRequest(BaseModel):
    query: str
    context: Optional[str] = ""

class PromptSearchRequest(BaseModel):
    query: str
    prompt_template: str
    variables: Optional[Dict[str, Any]] = None

class SearchResponse(BaseModel):
    query: str
    synthesis: str
    sources: List[str]

@app.on_event("startup")
async def startup_event():
    global agent
    try:
        agent = WebSearchAgent()
    except Exception as e:
        agent = None
        print(f"Startup error: {e}")

@app.get("/health")
async def health():
    return {"status": "healthy" if agent else "unhealthy"}

@app.post("/search", response_model=SearchResponse)
async def search(req: SearchRequest):
    if not agent:
        raise HTTPException(503, "Agent non initialis√©")
    try:
        res = agent.search_and_summarize(req.query, req.context or "")
        return SearchResponse(query=res.query, synthesis=res.synthesis, sources=res.sources)
    except Exception as e:
        raise HTTPException(500, f"Erreur: {e}")

@app.post("/search/prompt", response_model=SearchResponse)
async def search_with_prompt(req: PromptSearchRequest):
    if not agent:
        raise HTTPException(503, "Agent non initialis√©")
    try:
        res = agent.search_with_prompt(req.query, req.prompt_template, req.variables or {})
        return SearchResponse(query=res.query, synthesis=res.synthesis, sources=res.sources)
    except Exception as e:
        raise HTTPException(500, f"Erreur: {e}")

@app.post("/brief", response_model=SearchResponse)
async def brief(req: BriefRequest):
    if not agent:
        raise HTTPException(503, "Agent non initialis√©")
    prompt_template = (
        "Tu es un assistant sp√©cialis√© en r√©sum√© m√©dical pour les m√©decins g√©n√©ralistes.\n"
        "Ta mission est de cr√©er un \"Brief M√©dical Flash\" quotidien pour le Dr. Marie Dubois.\n\n"
        "‚öôÔ∏è Contexte utilisateur :\n"
        "Sp√©cialit√© / Domaines d‚Äôint√©r√™t : {{specialite}}\n"
        "Fr√©quence souhait√©e du brief : {{frequence}}\n"
        "Format pr√©f√©r√© du brief : {{format_brief}}\n"
        "Type de contenu √† privil√©gier : {{type_contenu}}\n"
        "Style pr√©f√©r√© : {{style}}\n"
        "Th√©matiques prioritaires : {{thematiques}}\n"
        "Pr√©f√©rences pour la veille sur les m√©dicaments : {{medicaments}}\n"
        "Recommandations officielles : {{recommandations}}\n"
        "Int√©r√™t pour la formation continue : {{formation_continue}}\n"
        "Int√©r√™t pour le suivi des tendances sant√© publique : {{tendances_sante_publique}}\n\n"
        "üéØ Objectif :\n"
        "G√©n√©rer un r√©sum√© m√©dical de la journ√©e en lien avec les sources officielles (HAS, soci√©t√©s savantes, PubMed, autorit√©s de sant√©).\n"
        "Toujours inclure les sources (lien ou r√©f√©rence).\n"
        "Limiter le r√©sum√© √† {{limite}} mots maximum pour rester lisible en moins de 5 minutes.\n"
        "Pr√©senter les r√©sultats sous forme de {{style}} avec une tonalit√© {{tonalite}}.\n"
        "Inclure une section finale ‚Äú√Ä appliquer demain en consultation‚Äù avec 2‚Äì3 points pratiques.\n\n"
        "‚ö†Ô∏è Contraintes :\n"
        "Pas de conseils hors cadre m√©dical officiel.\n"
        "Ne jamais inventer de sources.\n"
        "Transparence totale : afficher la date et la r√©f√©rence de chaque recommandation ou √©tude.\n"
        "Si aucune actualit√© pertinente n‚Äôest trouv√©e, r√©pondre : ‚ÄúPas de nouveaut√© significative aujourd‚Äôhui. Voir dernier brief.‚Äù"
    )
    variables = req.dict()
    variables["thematiques"] = ", ".join(req.thematiques)
    res = agent.search_with_prompt(
        base_query="R√©sum√© m√©dical du jour",
        prompt_template=prompt_template,
        variables=variables
    )
    # Retourne la r√©ponse format√©e en JSON complet
    return JSONResponse(content={
        "query": res.query,
        "synthesis": res.synthesis,
        "sources": res.sources
    })

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
